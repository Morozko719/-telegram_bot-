from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
from datetime import datetime
import pytz
import requests
import logging
import os

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# API Tokens and IDs
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAME = "@rasstanovka1"
ADMIN_ID = 5038917985
PAYMENT_CHANNEL = "@payment_receipts_channel"
GROUP_LINK = "https://t.me/+GyQMHRoiUaAyODY6"

# Minimum amounts for different currencies
MIN_AMOUNTS = {
    'RUB': 7000,
    'EUR': 70,
    'TRY': 2100
}

# Conversation states
(
    CHOOSING_ACTION,
    GOAL_SELECTION,
    PROGRAM_CHECK,
    BUDGET_CHECK,
    WAITING_FOR_AMOUNT,
    WAITING_FOR_NAME,
    SELECTING_PAYMENT,
    WAITING_FOR_PAYMENT,
    SEARCHING_KEYWORDS
) = range(9)

# Payment information
PAYMENT_INFO = {
    'RUB': {
        'Sberbank': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)",
        'Alfa-Bank': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)"
    },
    'TRY': {
        'IBAN': "TR35 0082 9000 0949 1229 5690 00"
    },
    'EUR': {
        'IBAN': "ES1001825715370201603002 (–ö–ª–∞–≤–¥–∏—è –•—Ä–∞–±—Ä—ã—Ö)",
        'Bizum': "634334937"
    },
    'PayPal': "paypal.me/grafinya2015outlooke"
}

# Course program text
COURSE_PROGRAM = """
‚ú® ¬´–ö–û–î –õ–Æ–ë–í–ò: –°–û–ó–î–ê–ô –ì–ê–†–ú–û–ù–ò–ß–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø¬ª

–ì–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Å–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é? –¢–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥—É ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª!

üìù –ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?
–≠—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–¥–µ –≤—ã:
üîÆ –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –∂–¥—É—Ç –≤–∞—Å –≤ –ª—é–±–≤–∏.
üíñ –ò—Å—Ü–µ–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±–∏–¥—ã –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏, –º–µ—à–∞—é—â–∏–µ –≤–∞—à–µ–º—É —Å—á–∞—Å—Ç—å—é.
‚ú® –ù–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–º –ø–æ–ª–µ —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.

üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?
üí° –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.
üåü –¢–µ—Ç–∞-—Ö–∏–ª–∏–Ω–≥: –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª—é–±–≤–∏.
üî¢ –†–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üßò‚Äç‚ôÄ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ä–æ–¥–æ–≤—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏, —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ª—é–±–≤–∏.

üë©‚Äçüè´ –ö—Ç–æ –≤–µ–¥–µ—Ç –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥?
üå∫ –ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞ ‚Äî —Ç–∞—Ä–æ–ª–æ–≥ —Å 25-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ë. –•–µ–ª–ª–∏–Ω–≥–µ—Ä–∞, –º–∞—Å—Ç–µ—Ä-—É—á–∏—Ç–µ–ª—å –†—ç–π–∫–∏, —Ç–µ—Ç–∞-—Ö–∏–ª–ª–µ—Ä –∏ –±–∏–æ—ç–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç.
üåü –ö–ª–∞–≤–¥–∏—è –•—Ä–∞–±—Ä—ã—Ö ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ MBI –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–µ–∫—Å–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏–∏, –≥–∏–ø–Ω–æ–ª–æ–≥-—Ä–µ–≥—Ä–µ—Å—Å–æ–ª–æ–≥ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –≤—Å–µ–ª–µ–Ω—Å–∫–∏–π —Ç–µ—Ä–∞–ø–µ–≤—Ç.

‚ú® –î–≤–∞ –º–æ—â–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ—á—Ç—ã.

üìÖ –ö–æ–≥–¥–∞: 17-18 —è–Ω–≤–∞—Ä—è, –°–≤—è—Ç–∫–∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.

üíå –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏."""

def get_payment_keyboard():
    return ReplyKeyboardMarkup([
        ['–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö'],
        ['PayPal'],
        ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'],
        ['–û—Ç–º–µ–Ω–∞']
    ], one_time_keyboard=True)

async def send_message_to_channel(message):
    try:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        params = {
            "chat_id": "@love_harmony_code_bot",
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending message to channel: {e}")
        return None

async def send_message_to_admin(message, photo=None, document=None):
    """Send message to admin"""
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
    if photo:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendPhoto"
    elif document:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendDocument"
    
    try:
        params = {
            "chat_id": ADMIN_ID,
            "parse_mode": "HTML"
        }
        
        if photo:
            params["photo"] = photo
            params["caption"] = message
        elif document:
            params["document"] = document
            params["caption"] = message
        else:
            params["text"] = message
        
        response = requests.post(url, params=params)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"Error sending message to admin: {e}")
        return False

class Bot:
    def __init__(self):
        self.keywords = []
        self.parsed_users = set()

    def save_data(self):
        # Save data to file or database
        pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the conversation with the bot"""
    user = update.effective_user
    
    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")],
        [KeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Telegram.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

    return CHOOSING_ACTION

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user choice."""
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text == 'üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º':
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="add_keywords")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", callback_data="list_keywords")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üîç –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=reply_markup
        )
        
    elif text == 'üì® –†–∞—Å—Å—ã–ª–∫–∞':
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="create_message")],
            [InlineKeyboardButton("üì§ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_sending")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üì® –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
            reply_markup=reply_markup
        )
        
    elif context.user_data.get('awaiting_keywords'):
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [word.strip() for word in text.split('\n') if word.strip()]
        bot = Bot()
        bot.keywords = keywords
        bot.save_data()
        context.user_data['awaiting_keywords'] = False
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    return CHOOSING_ACTION

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle callback queries"""
    query = update.callback_query
    await query.answer()
    logger.info(f"Callback query: {query.data}")

    if query.data == "add_keywords":
        context.user_data['awaiting_keywords'] = True
        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "—Ç–∞—Ä–æ\n"
            "–≥–∞–¥–∞–Ω–∏–µ\n"
            "–∞—Å—Ç—Ä–æ–ª–æ–≥\n"
            "–Ω—É–º–µ—Ä–æ–ª–æ–≥\n\n"
            "‚ùóÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å:\n"
            "‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–∏ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ"
        )
        
    elif query.data == "list_keywords":
        bot = Bot()
        keywords = "\n".join(bot.keywords) if bot.keywords else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        await query.edit_message_text(
            f"üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n\n{keywords}"
        )
        
    elif query.data == "start_search":
        bot = Bot()
        if not bot.keywords:
            await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!")
            return
        
        await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        total_found = 0
        
        try:
            for keyword in bot.keywords:
                try:
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
                    async for message in context.bot.search_global(keyword):
                        if message.from_user and not message.from_user.is_bot:
                            user_id = str(message.from_user.id)
                            if user_id not in bot.parsed_users:
                                bot.parsed_users.add(user_id)
                                total_found += 1
                                
                                if total_found % 10 == 0:
                                    await query.edit_message_text(
                                        f"üîÑ –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É '{keyword}'...\n"
                                        f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_found}"
                                    )
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–ª–æ–≤—É {keyword}: {str(e)}")
                    continue
            
            bot.save_data()
            await query.edit_message_text(
                f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_found}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(bot.parsed_users)}"
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ: {str(e)}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

    return SEARCHING_KEYWORDS

async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user choice."""
    if update.message.text == "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ –∏ —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –Ω–∞ —ç—Ç–æ–º –∫—É—Ä—Å–µ?",
            reply_markup=ReplyKeyboardRemove()
        )
        return GOAL_SELECTION
    else:
        keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'",
            reply_markup=reply_markup
        )
        return CHOOSING_ACTION

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    
    await update.message.reply_text(
        "–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∫—É—Ä—Å–∞?",
        reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
    )
    return PROGRAM_CHECK

async def handle_program_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    if response == '–Ω–µ—Ç':
        await update.message.reply_text(COURSE_PROGRAM)
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
            reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
        )
        return BUDGET_CHECK
    else:
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
            reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
        )
        return BUDGET_CHECK

async def handle_budget_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == '–¥–∞':
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_FOR_AMOUNT
    else:
        await update.message.reply_text(
            "–ñ–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        if amount < MIN_AMOUNTS['RUB']:  # 7000 —Ä—É–±–ª–µ–π
            keyboard = ReplyKeyboardMarkup([
                ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'],
                ['–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É'],
                ['–û—Ç–º–µ–Ω–∞']
            ], one_time_keyboard=True)
            
            await update.message.reply_text(
                "–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Ç–æ–∂–µ –¥–µ–Ω—å–≥–∏, –Ω–æ –∏—Ö –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "
                "—Ç–≤–æ–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤ —Ä–µ—à–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_AMOUNTS['RUB']}—Ä. –í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
                "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
                "- –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É",
                reply_markup=keyboard
            )
            return WAITING_FOR_AMOUNT
        else:
            context.user_data['amount'] = amount
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return WAITING_FOR_NAME
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_FOR_AMOUNT

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    return SELECTING_PAYMENT

async def handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    if text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_USERNAME}",
            reply_markup=get_payment_keyboard()
        )
        return SELECTING_PAYMENT
    
    payment_methods = {
        '–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö': ('RUB', '—Ä—É–±–ª—è—Ö'),
        '–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ': ('EUR', '–µ–≤—Ä–æ'),
        '–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö': ('TRY', '–ª–∏—Ä–∞—Ö'),
        'PayPal': ('PayPal', 'PayPal')
    }
    
    if text not in payment_methods:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_payment_keyboard()
        )
        return SELECTING_PAYMENT
    
    currency, currency_name = payment_methods[text]
    context.user_data['payment_currency'] = currency
    
    if currency == 'PayPal':
        payment_text = f"PayPal: {PAYMENT_INFO['PayPal']}"
    else:
        payment_text = "\n".join([f"{k}: {v}" for k, v in PAYMENT_INFO[currency].items()])
    
    await update.message.reply_text(
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_text}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω —á–µ–∫–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return WAITING_FOR_PAYMENT

async def process_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo or update.message.document:
        name = context.user_data.get('name', 'Unknown')
        currency = context.user_data.get('payment_currency', 'RUB')
        user_id = update.effective_user.id
        
        # Prepare notification message
        notification = (
            f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üí≥ –í–∞–ª—é—Ç–∞: {currency}\n"
            f"üÜî User ID: {user_id}\n"
            f"üéØ –¶–µ–ª—å: {context.user_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
        )
        
        # Send to admin
        success = await send_message_to_admin(
            notification,
            photo=update.message.photo[-1].file_id if update.message.photo else None,
            document=update.message.document.file_id if update.message.document else None
        )
        
        if success:
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: {GROUP_LINK}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: "
                f"{ADMIN_USERNAME}"
            )
        
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ."
        )
        return WAITING_FOR_PAYMENT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the conversation."""
    await update.message.reply_text(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for admin payment confirmation command"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    try:
        # Get user_id from command arguments and convert to integer
        if not context.args:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä: /confirm 123456789")
            return
            
        try:
            user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # Send confirmation message to user
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å!\n"
                    f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {GROUP_LINK}"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
            return
        
        await update.message.reply_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {str(e)}")

def main():
    """Start the bot."""
    # Create application
    application = Application.builder().token(API_TOKEN).build()

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(handle_callback)
            ],
            GOAL_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            PROGRAM_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_program_check)],
            BUDGET_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget_check)],
            WAITING_FOR_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            SELECTING_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_selection)],
            WAITING_FOR_PAYMENT: [MessageHandler(filters.ALL & ~filters.COMMAND, process_payment_confirmation)],
            SEARCHING_KEYWORDS: [CallbackQueryHandler(handle_callback)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Add handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('confirm', confirm_payment))
    application.add_handler(CallbackQueryHandler(handle_callback))  

    # Start the bot
    print("Bot is running...")
    PORT = int(os.getenv('PORT', '8080'))
    application.run_polling(port=PORT)

if __name__ == '__main__':
    main()