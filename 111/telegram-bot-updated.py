import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, KeyboardButton, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime
import pytz

# API tokens and IDs
API_TOKEN = "7785115175:AAHw9wZ3pLjNrdaTFadP2BKCR9GyS2zvGGU"
ADMIN_USERNAME = "@rasstanovka1"
ADMIN_ID = 5038917985
PAYMENT_CHANNEL = "@payment_receipts_channel"
GROUP_LINK = "https://t.me/+GyQMHRoiUaAyODY6"

# Conversation states
(
    CHOOSING_ACTION,
    GOAL_SELECTION,
    PROGRAM_CHECK,
    WAITING_FOR_NAME,
    SELECTING_PAYMENT,
    WAITING_FOR_PAYMENT
) = range(6)

# Payment information
PAYMENT_INFO = {
    'RUB': {
        '–°–±–µ—Ä–±–∞–Ω–∫': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)",
        '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)"
    },
    'TRY': {
        'IBAN': "TR35 0082 9000 0949 1229 5690 00"
    },
    'EUR': {
        'IBAN': "ES1001825715370201603002 (Klavdiya Khrabrykh)",
        'Bizum': "634334937"
    },
    'PayPal': "paypal.me/grafinya2015outlooke"
}

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞
COURSE_PROGRAM = """
[–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
"""

def get_payment_keyboard():
    return ReplyKeyboardMarkup([
        ['–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö'],
        ['PayPal'],
        ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'],
        ['–û—Ç–º–µ–Ω–∞']
    ], one_time_keyboard=True)

async def send_message_to_admin(context: ContextTypes.DEFAULT_TYPE, user_id: int, message: str, file_id=None, file_type=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode='HTML'
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if file_id:
            if file_type == 'photo':
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption="üìé –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
                )
            elif file_type == 'document':
                await context.bot.send_document(
                    chat_id=ADMIN_ID,
                    document=file_id,
                    caption="üìé –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
                )
        return True
    except Exception as e:
        print(f"Error sending message to admin: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    context.user_data['admin_notified'] = False
    
    await update.message.reply_text(
    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫—É—Ä—Å '–ö–û–î –õ–Æ–ë–í–ò'.\n\n"
    "üîπ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'.\n"
    "üîπ –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:\n"
    "   - –£–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–º—è\n"
    "   - –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
    "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n\n",
    reply_markup=ReplyKeyboardMarkup([['–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é']], resize_keyboard=True, one_time_keyboard=True)
)

    
    if not context.user_data.get('admin_notified') and (
        (user.username and user.username.lower() == ADMIN_USERNAME.replace("@", "").lower()) or 
        (str(user.id) == str(ADMIN_ID))
    ):
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text="‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö."
            )
            context.user_data['admin_notified'] = True
        except Exception as e:
            print(f"Error sending test message to admin: {e}")
    
    return CHOOSING_ACTION

async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ –∏ —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –Ω–∞ —ç—Ç–æ–º –∫—É—Ä—Å–µ?",
            reply_markup=ReplyKeyboardRemove()
        )
        return GOAL_SELECTION
    else:
        keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'",
            reply_markup=reply_markup
        )
        return CHOOSING_ACTION

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    
    await update.message.reply_text(
        "–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∫—É—Ä—Å–∞?",
        reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
    )
    return PROGRAM_CHECK

async def handle_program_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    if response == "–Ω–µ—Ç":
        await update.message.reply_text(
            COURSE_PROGRAM,
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text(
            "–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞'",
            reply_markup=ReplyKeyboardMarkup([['–î–∞']], one_time_keyboard=True)
        )
        return PROGRAM_CHECK
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é."
    )
    return WAITING_FOR_NAME

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {context.user_data['name']}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    return SELECTING_PAYMENT

async def process_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selection = update.message.text
    
    if selection == '–û—Ç–º–µ–Ω–∞':
        return await cancel(update, context)

    if selection == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        await update.message.reply_text(
            f"üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    currency_map = {
        '–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö': 'RUB',
        '–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ': 'EUR',
        '–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö': 'TRY',
        'PayPal': 'PayPal'
    }
    
    currency = currency_map.get(selection)
    if not currency:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_payment_keyboard()
        )
        return SELECTING_PAYMENT

    context.user_data['payment_currency'] = currency
    
    payment_methods = PAYMENT_INFO.get(currency, {})
    payment_message = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
    
    if currency == 'PayPal':
        payment_message += f"PayPal: {PAYMENT_INFO['PayPal']}"
    else:
        for method, details in payment_methods.items():
            payment_message += f"{method}: {details}\n"
    
    payment_message += "\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º"
    
    await update.message.reply_text(
        payment_message,
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], one_time_keyboard=True)
    )
    return WAITING_FOR_PAYMENT

async def process_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo or update.message.document:
        name = context.user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        currency = context.user_data.get('payment_currency', 'RUB')
        user_id = update.effective_user.id
        username = update.effective_user.username if update.effective_user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        
        try:
            admin_message = (
                f"üí´ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n"
                f"üÜî ID: {user_id}\n"
                f"üì± Username: @{username}\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {currency}"
            )
            
            file_id = None
            file_type = None
            
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                file_type = 'photo'
            else:
                file_id = update.message.document.file_id
                file_type = 'document'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            success = await send_message_to_admin(
                context,
                user_id,
                admin_message,
                file_id,
                file_type
            )
            
            if success:
                context.bot_data[f"payment_{user_id}"] = {
                    "name": name,
                    "chat_id": update.effective_chat.id,
                    "confirmed": False
                }
                
                await update.message.reply_text(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
                    "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ "
                    f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}"
                )
                return WAITING_FOR_PAYMENT
                
        except Exception as e:
            print(f"Error in payment confirmation: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ "
                f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}"
            )
            return WAITING_FOR_PAYMENT
            
    elif update.message.text == '–û—Ç–º–µ–Ω–∞':
        return await cancel(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ, "
            "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], one_time_keyboard=True)
        )
        return WAITING_FOR_PAYMENT

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    try:
        user_id = int(context.args[0])
        user_data = context.bot_data.get(f"payment_{user_id}")
        
        if user_data and not user_data["confirmed"]:
            user_data["confirmed"] = True
            
            await context.bot.send_message(
                chat_id=user_data["chat_id"],
                text=(
                    "‚ú® –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!\n\n"
                    f"üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ: {GROUP_LINK}\n\n"
                    f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_USERNAME}"
                )
            )
            
            await update.message.reply_text(f"–û–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['name']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
            
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def main():
    application = Application.builder().token(API_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
    commands = [
        BotCommand(command='start', description='–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∫—É—Ä—Å')
    ]
    
    async def post_init(app: Application):
        await app.bot.set_my_commands(commands)
    
    application.post_init = post_init
    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose)
        ],
        states={
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            GOAL_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            PROGRAM_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_program_check)],
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
            SELECTING_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_selection)],
            WAITING_FOR_PAYMENT: [
                MessageHandler((filters.PHOTO | filters.Document.ALL | filters.TEXT) & ~filters.COMMAND, process_payment_confirmation)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('confirm', confirm_payment))
    application.add_handler(conv_handler)
    
    print("Bot started...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import nest_asyncio
    import asyncio
    
    nest_asyncio.apply()
    asyncio.run(main())