import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime
import pytz

# API tokens and IDs
API_TOKEN = "7785115175:AAHw9wZ3pLjNrdaTFadP2BKCR9GyS2zvGGU"
CHANNEL_ID = "@Rasstanovochki"
ADMIN_ID = "5038917985"

# Conversation states
(
    CHOOSING,
    GOAL_SELECTION,
    PROGRAM_CHECK,
    BUDGET_CHECK,
    WAITING_FOR_NAME,
    SELECTING_PAYMENT,
    WAITING_FOR_PAYMENT
) = range(7)

# Payment information
PAYMENT_INFO = {
    'RUB': {
        '–°–±–µ—Ä–±–∞–Ω–∫': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)",
        '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)"
    },
    'TRY': {
        'IBAN': "TR35 0082 9000 0949 1229 5690 00"
    },
    'EUR': {
        'IBAN': "ES1001825715370201603002 (Klavdiya Khrabrykh)",
        'Bizum': "634334937"
    },
    'PayPal': "paypal.me/grafinya2015outlooke"
}

COURSE_PRICES = {

}

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞
COURSE_PROGRAM = """
‚ú® ¬´–ö–û–î –õ–Æ–ë–í–ò: –°–û–ó–î–ê–ô –ì–ê–†–ú–û–ù–ò–ß–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø¬ª

–ì–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Å–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é? –¢–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥—É ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª!

üìù –ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?
–≠—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–¥–µ –≤—ã:
üîÆ –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –∂–¥—É—Ç –≤–∞—Å –≤ –ª—é–±–≤–∏.
üíñ –ò—Å—Ü–µ–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±–∏–¥—ã –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏, –º–µ—à–∞—é—â–∏–µ –≤–∞—à–µ–º—É —Å—á–∞—Å—Ç—å—é.
‚ú® –ù–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–º –ø–æ–ª–µ —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.

üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?
üí° –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.
üåü –¢–µ—Ç–∞-—Ö–∏–ª–∏–Ω–≥: –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª—é–±–≤–∏.
üî¢ –†–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üßò‚Äç‚ôÄ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ä–æ–¥–æ–≤—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏, —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ª—é–±–≤–∏.

üë©‚Äçüè´ –ö—Ç–æ –≤–µ–¥–µ—Ç –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥?
üå∫ –ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞ ‚Äî —Ç–∞—Ä–æ–ª–æ–≥ —Å 25-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ë. –•–µ–ª–ª–∏–Ω–≥–µ—Ä–∞, –º–∞—Å—Ç–µ—Ä-—É—á–∏—Ç–µ–ª—å –†—ç–π–∫–∏, —Ç–µ—Ç–∞-—Ö–∏–ª–ª–µ—Ä –∏ –±–∏–æ—ç–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç.
üåü –ö–ª–∞–≤–¥–∏—è –•—Ä–∞–±—Ä—ã—Ö ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ MBI –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–µ–∫—Å–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏–∏, –≥–∏–ø–Ω–æ–ª–æ–≥-—Ä–µ–≥—Ä–µ—Å—Å–æ–ª–æ–≥ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –≤—Å–µ–ª–µ–Ω—Å–∫–∏–π —Ç–µ—Ä–∞–ø–µ–≤—Ç.

‚ú® –î–≤–∞ –º–æ—â–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ—á—Ç—ã.

üìÖ –ö–æ–≥–¥–∞: 17-18 —è–Ω–≤–∞—Ä—è, –°–≤—è—Ç–∫–∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.

üíå –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.

"""

PROGRAM_LINK = "https://your-program-link-here.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

def get_payment_keyboard():
    return ReplyKeyboardMarkup([
        ['PayPal'],
        ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'],
        ['–û—Ç–º–µ–Ω–∞']
    ], one_time_keyboard=True)

async def send_message_to_channel(message):
    try:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        params = {
            "chat_id": CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending message to channel: {e}")
        return None

async def send_message_to_admin(user_name, payment_amount, currency, payment_method):
    try:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        message = (
            f"üí´ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üí∞ –°—É–º–º–∞: {payment_amount} {currency}\n"
            f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        params = {
            "chat_id": ADMIN_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error sending message to admin: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–µ '–ö–û–î –õ–Æ–ë–í–ò: –°–û–ó–î–ê–ô –ì–ê–†–ú–û–ù–ò–ß–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø'. "
        "–ú–æ–≥—É –ª–∏ —è –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ª—É—á—à–µ –≤–∞–º –ø–æ–º–æ—á—å?",
        reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
    )
    return CHOOSING

async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text.lower()
    if user_response == "–¥–∞":
        goals_keyboard = ReplyKeyboardMarkup([
            ['–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è'],
            ['–ù–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏'],
            ['–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç']
        ], one_time_keyboard=True)
        
        await update.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥–∞? (–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç)",
            reply_markup=goals_keyboard
        )
        return GOAL_SELECTION
    else:
        await update.message.reply_text(
            "–ü–æ–Ω—è–ª, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    
    await update.message.reply_text(
        "–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∫—É—Ä—Å–∞?",
        reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True)
    )
    return PROGRAM_CHECK

async def handle_program_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    if response == "–Ω–µ—Ç":
        await update.message.reply_text(
            COURSE_PROGRAM,
            reply_markup=ReplyKeyboardRemove()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–º—É –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è
        await update.message.reply_text(
            "–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞'",
            reply_markup=ReplyKeyboardMarkup([['–î–∞']], one_time_keyboard=True)
        )
        return PROGRAM_CHECK
    
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=ReplyKeyboardRemove()
    )
    return BUDGET_CHECK

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        budget = float(update.message.text.replace(' ', '').replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', ''))
        if budget < 7000:
            await update.message.reply_text(
                "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! 7000 —Ä—É–±–ª–µ–π ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è. "
                "–ï—Å–ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ "
                "–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫. –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç?",
                reply_markup=ReplyKeyboardMarkup([
                    ['–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'],
                    ['–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫'],
                    ['–í—Å—ë-—Ç–∞–∫–∏ —Ö–æ—á—É –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å']
                ], one_time_keyboard=True)
            )
            return BUDGET_CHECK
        else:
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–≤–æ—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é. "
                "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é."
            )
            return WAITING_FOR_NAME
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7000)"
        )
        return BUDGET_CHECK

async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {context.user_data['name']}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    return SELECTING_PAYMENT

async def process_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selection = update.message.text.split(' - ')[0]
    context.user_data['payment_currency'] = selection
    
    if selection == '–û—Ç–º–µ–Ω–∞':
        return await cancel(update, context)

    if selection == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        await update.message.reply_text(
            "üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @Rasstanovochki",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    payment_methods = PAYMENT_INFO.get(selection, {})
    payment_message = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã {selection}:\n\n"
    
    for method, details in payment_methods.items():
        payment_message += f"{method}: {details}\n"
    
    if selection in COURSE_PRICES:
        payment_message += f"\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {COURSE_PRICES[selection]} {selection}"
    
    payment_message += "\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '—á–µ–∫'"
    
    await update.message.reply_text(
        payment_message,
        reply_markup=ReplyKeyboardMarkup([['—á–µ–∫'], ['–û—Ç–º–µ–Ω–∞']], one_time_keyboard=True)
    )
    return WAITING_FOR_PAYMENT

async def process_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_confirmation = update.message.text.lower()
    if payment_confirmation == "—á–µ–∫":
        name = context.user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        currency = context.user_data.get('payment_currency', 'RUB')
        payment_amount = COURSE_PRICES.get(currency, 7000)
        
        await send_message_to_admin(
            name, 
            payment_amount, 
            currency,
            "Unknown"
        )
        
        await send_message_to_channel(
            f"üéâ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫—É—Ä—Å–∞ '–ö–û–î –õ–Æ–ë–í–ò'!\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {name}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_amount} {currency}"
        )
        
        await update.message.reply_text(
            "‚ú® –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!\n\n"
            "üì± –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–Ø –¥–æ–±–∞–≤–ª—é –≤–∞—Å –≤ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @grafinya2015",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '—á–µ–∫' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return WAITING_FOR_PAYMENT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def main():
    application = Application.builder().token(API_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            GOAL_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            PROGRAM_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_program_check)],
            BUDGET_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
            SELECTING_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_selection)],
            WAITING_FOR_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_confirmation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    print("Bot started...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import nest_asyncio
    import asyncio
    
    nest_asyncio.apply()
    asyncio.run(main())
