from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, KeyboardButton, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime
import pytz
import requests

# API Tokens and IDs
API_TOKEN = "7785115175:AAHw9wZ3pLjNrdaTFadP2BKCR9GyS2zvGGU"
ADMIN_USERNAME = "@rasstanovka1"
ADMIN_ID = 5038917985
PAYMENT_CHANNEL = "@payment_receipts_channel"
GROUP_LINK = "https://t.me/+GyQMHRoiUaAyODY6"

# Minimum amounts for different currencies
MIN_AMOUNTS = {
    'RUB': 7000,
    'EUR': 70,
    'TRY': 2100
}

# Conversation states
(
    CHOOSING_ACTION,
    GOAL_SELECTION,
    PROGRAM_CHECK,
    BUDGET_CHECK,
    WAITING_FOR_NAME,
    SELECTING_PAYMENT,
    WAITING_FOR_PAYMENT
) = range(7)

# Payment information
PAYMENT_INFO = {
    'RUB': {
        'Sberbank': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)",
        'Alfa-Bank': "9602660644 (–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞)"
    },
    'TRY': {
        'IBAN': "TR35 0082 9000 0949 1229 5690 00"
    },
    'EUR': {
        'IBAN': "ES1001825715370201603002 (–ö–ª–∞–≤–¥–∏—è –•—Ä–∞–±—Ä—ã—Ö)",
        'Bizum': "634334937"
    },
    'PayPal': "paypal.me/grafinya2015outlooke"
}

COURSE_PROGRAM = """
‚ú® ¬´–ö–û–î –õ–Æ–ë–í–ò: –°–û–ó–î–ê–ô –ì–ê–†–ú–û–ù–ò–ß–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø¬ª

–ì–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Å–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é? –¢–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥—É ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª!

üìù –ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?
–≠—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–¥–µ –≤—ã:
üîÆ –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –∂–¥—É—Ç –≤–∞—Å –≤ –ª—é–±–≤–∏.
üíñ –ò—Å—Ü–µ–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±–∏–¥—ã –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏, –º–µ—à–∞—é—â–∏–µ –≤–∞—à–µ–º—É —Å—á–∞—Å—Ç—å—é.
‚ú® –ù–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–º –ø–æ–ª–µ —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.

üìö –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?
üí° –¢–∞—Ä–æ-–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.
üåü –¢–µ—Ç–∞-—Ö–∏–ª–∏–Ω–≥: –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π –ª—é–±–≤–∏.
üî¢ –†–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üßò‚Äç‚ôÄ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ä–æ–¥–æ–≤—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏, —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ª—é–±–≤–∏.

üë©‚Äçüè´ –ö—Ç–æ –≤–µ–¥–µ—Ç –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥?
üå∫ –ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞ ‚Äî —Ç–∞—Ä–æ–ª–æ–≥ —Å 25-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ë. –•–µ–ª–ª–∏–Ω–≥–µ—Ä–∞, –º–∞—Å—Ç–µ—Ä-—É—á–∏—Ç–µ–ª—å –†—ç–π–∫–∏, —Ç–µ—Ç–∞-—Ö–∏–ª–ª–µ—Ä –∏ –±–∏–æ—ç–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç.
üåü –ö–ª–∞–≤–¥–∏—è –•—Ä–∞–±—Ä—ã—Ö ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ MBI –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–µ–∫—Å–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏–∏, –≥–∏–ø–Ω–æ–ª–æ–≥-—Ä–µ–≥—Ä–µ—Å—Å–æ–ª–æ–≥ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –≤—Å–µ–ª–µ–Ω—Å–∫–∏–π —Ç–µ—Ä–∞–ø–µ–≤—Ç.

‚ú® –î–≤–∞ –º–æ—â–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ—á—Ç—ã.

üìÖ –ö–æ–≥–¥–∞: 17-18 —è–Ω–≤–∞—Ä—è, –°–≤—è—Ç–∫–∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.

üíå –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π ¬´–ö–æ–¥ –õ—é–±–≤–∏¬ª –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏."""

def get_payment_keyboard():
    return ReplyKeyboardMarkup([
        ['–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ'],
        ['–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö'],
        ['PayPal'],
        ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'],
        ['–û—Ç–º–µ–Ω–∞']
    ], one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    context.user_data['admin_notified'] = False
    
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫—É—Ä—Å '–ö–û–î –õ–Æ–ë–í–ò'.\n\n"
        "üîπ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'.\n"
        "üîπ –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:\n"
        "   - –£–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–º—è\n"
        "   - –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
        "   - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ",
        reply_markup=ReplyKeyboardMarkup([['–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é']], resize_keyboard=True, one_time_keyboard=True)
    )
    
    if not context.user_data.get('admin_notified') and str(user.id) == str(ADMIN_ID):
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text="‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö."
            )
            context.user_data['admin_notified'] = True
        except Exception as e:
            print(f"Error sending test message to admin: {e}")
    
    return CHOOSING_ACTION

async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = update.message.text

    if text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å':
        keyboard = [
            ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å "–ö–û–î –õ–Æ–ë–í–ò"'],
            ['–ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=reply_markup
        )
        return GOAL_SELECTION

    elif text == '–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å':
        keyboard = [['–†–£–ë'], ['–ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )
        return SELECTING_PAYMENT

    return CHOOSING_ACTION

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏."""
    text = update.message.text

    if text == '–ù–∞–∑–∞–¥':
        return await start(update, context)

    context.user_data['goal'] = text
    keyboard = [['–î–∞', '–ù–µ—Ç'], ['–ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É–¥–µ–ª—è—Ç—å 2-3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞?",
        reply_markup=reply_markup
    )
    return PROGRAM_CHECK

async def handle_program_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.lower()
    if response == '–Ω–µ—Ç':
        await update.message.reply_text(COURSE_PROGRAM)
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=ReplyKeyboardRemove()
        )
        return BUDGET_CHECK
    else:
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=ReplyKeyboardRemove()
        )
        return BUDGET_CHECK

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        budget = float(update.message.text.replace(' ', '').replace('‚ÇΩ', '').replace('—Ä', '').replace('—Ä—É–±', ''))
        if budget < MIN_AMOUNTS['RUB']:
            keyboard = [[KeyboardButton("–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            
            await update.message.reply_text(
                "–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Ç–æ–∂–µ –¥–µ–Ω—å–≥–∏, –Ω–æ –∏—Ö –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "
                "—Ç–≤–æ–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤ —Ä–µ—à–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:\n"
                f"‚Ä¢ {MIN_AMOUNTS['RUB']} —Ä—É–±–ª–µ–π\n"
                f"‚Ä¢ {MIN_AMOUNTS['EUR']} –µ–≤—Ä–æ\n"
                f"‚Ä¢ {MIN_AMOUNTS['TRY']} –ª–∏—Ä\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {ADMIN_USERNAME}\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É', —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Å—É–º–º—É",
                reply_markup=reply_markup
            )
            return BUDGET_CHECK
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            return WAITING_FOR_NAME
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
            reply_markup=ReplyKeyboardRemove()
        )
        return BUDGET_CHECK

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {context.user_data['name']}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    return SELECTING_PAYMENT

async def handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    if text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    payment_method = None
    if text == '–û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö':
        payment_info = "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö:\n"
        for bank, details in PAYMENT_INFO['RUB'].items():
            payment_info += f"\n{bank}: {details}"
        payment_method = 'RUB'
    elif text == '–û–ø–ª–∞—Ç–∞ –≤ –µ–≤—Ä–æ':
        payment_info = "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤ –µ–≤—Ä–æ:\n"
        for method, details in PAYMENT_INFO['EUR'].items():
            payment_info += f"\n{method}: {details}"
        payment_method = 'EUR'
    elif text == '–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—Ä–∞—Ö':
        payment_info = "–î–ª—è –æ–ø–ª–∞—Ç—ã –≤ –ª–∏—Ä–∞—Ö:\n"
        for method, details in PAYMENT_INFO['TRY'].items():
            payment_info += f"\n{method}: {details}"
        payment_method = 'TRY'
    elif text == 'PayPal':
        payment_info = f"–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayPal:\n{PAYMENT_INFO['PayPal']}"
        payment_method = 'PayPal'
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_payment_keyboard()
        )
        return SELECTING_PAYMENT

    context.user_data['payment_method'] = payment_method
    await update.message.reply_text(
        f"{payment_info}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )
    return WAITING_FOR_PAYMENT

async def process_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        user_name = context.user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        payment_method = context.user_data.get('payment_method', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            f"üí∞ –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–∞–Ω–∞–ª —Å —á–µ–∫–∞–º–∏
        if update.message.photo:
            photo = update.message.photo[-1]
            await context.bot.send_photo(
                chat_id=PAYMENT_CHANNEL,
                photo=photo.file_id,
                caption=admin_message
            )
        elif update.message.document:
            doc = update.message.document
            await context.bot.send_document(
                chat_id=PAYMENT_CHANNEL,
                document=doc.file_id,
                caption=admin_message
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. "
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.",
            reply_markup=ReplyKeyboardRemove()
        )

        return ConversationHandler.END

    except Exception as e:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        print(f"Error in process_payment_confirmation: {e}")
        return WAITING_FOR_PAYMENT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if str(update.message.from_user.id) != str(ADMIN_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_args = context.args
        if not command_args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = command_args[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                 f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞: {GROUP_LINK}\n\n"
                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        )
        
        await update.message.reply_text(f"–û–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")

def main():
    """Start the bot."""
    # Create application
    application = Application.builder().token(API_TOKEN).build()

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            GOAL_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            PROGRAM_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_program_check)],
            BUDGET_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_budget)],
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            SELECTING_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_selection)],
            WAITING_FOR_PAYMENT: [MessageHandler(filters.ALL & ~filters.COMMAND, process_payment_confirmation)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Add handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('confirm', confirm_payment))

    # Start the bot
    print("Bot is running...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
